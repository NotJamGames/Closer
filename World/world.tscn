[gd_scene load_steps=37 format=3 uid="uid://3vqlpilc2fl8"]

[ext_resource type="PackedScene" uid="uid://l21ohcak7u52" path="res://Models/desk_and_monitor.glb" id="1_2j35s"]
[ext_resource type="Script" path="res://World/world.gd" id="1_upb24"]
[ext_resource type="Material" uid="uid://n4svs2s8wqli" path="res://VFX/black_screen.material" id="2_lmplv"]
[ext_resource type="PackedScene" uid="uid://dtx0rpqsctv8d" path="res://UI/screen_interface.tscn" id="3_m55g1"]
[ext_resource type="Script" path="res://VFX/light_variation.gd" id="3_m71ua"]
[ext_resource type="Shader" path="res://VFX/noise.gdshader" id="4_61ix5"]
[ext_resource type="Shader" path="res://VFX/vignette.gdshader" id="4_wasif"]
[ext_resource type="Script" path="res://World/screen.gd" id="5_uyaoj"]
[ext_resource type="AudioStream" uid="uid://bmaplradmvpc8" path="res://Audio/Ambiences/background_hum.ogg" id="7_o1ah1"]
[ext_resource type="AudioStream" uid="uid://xnaxvwcy6qel" path="res://Audio/SFX/crt_startup.wav" id="7_tlk8b"]
[ext_resource type="AudioStream" uid="uid://d3ugm48yyb7r5" path="res://Audio/SFX/click_1.wav" id="11_0smbf"]
[ext_resource type="AudioStream" uid="uid://daq1h3ptosqww" path="res://Audio/SFX/click_2.wav" id="12_8djac"]
[ext_resource type="AudioStream" uid="uid://bv45a28dht1rn" path="res://Audio/SFX/click_3.wav" id="13_ea057"]
[ext_resource type="AudioStream" uid="uid://bhu7bvvv678kn" path="res://Audio/SFX/click_4.wav" id="14_p6rho"]
[ext_resource type="AudioStream" uid="uid://dp87u04nlqvn7" path="res://Audio/SFX/click_5.wav" id="15_vtsa8"]
[ext_resource type="AudioStream" uid="uid://cxyjpgtkspxml" path="res://Audio/SFX/keystroke_1.wav" id="16_c8kfr"]
[ext_resource type="AudioStream" uid="uid://cyldjvqbrfh4w" path="res://Audio/SFX/keystroke_2.wav" id="17_navo4"]
[ext_resource type="AudioStream" uid="uid://c54l8am62si2k" path="res://Audio/SFX/keystroke_3.wav" id="18_mjsvc"]
[ext_resource type="AudioStream" uid="uid://5e85plyocs46" path="res://Audio/SFX/keystroke_4.wav" id="19_ihivk"]
[ext_resource type="AudioStream" uid="uid://d8rt6lr6krmy" path="res://Audio/SFX/keystroke_5.wav" id="20_tafpt"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_ikkt3"]
noise_type = 3
seed = 6
frequency = 0.015

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_2aruo"]
noise = SubResource("FastNoiseLite_ikkt3")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_twt4i"]
albedo_texture = SubResource("NoiseTexture2D_2aruo")
texture_filter = 0

[sub_resource type="PlaneMesh" id="PlaneMesh_ttfdm"]
material = SubResource("StandardMaterial3D_twt4i")
size = Vector2(40, 40)
subdivide_width = 4
subdivide_depth = 4
center_offset = Vector3(1, 0, 0)

[sub_resource type="Shader" id="Shader_kuaka"]
code = "/*
NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.
with additional code converted from https://godotshaders.com/shader/realistic-crt-shader/
CRT grille and rolling lines made by @c64cosmin
Vignette and warping effect was made by pend00
Scanlines are from \"TimothyLottes\" FROM SHADERTOY
Then ported by AHOPNESS (@ahopness)
https://www.shadertoy.com/view/MsjXzh
*/

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform sampler2D texture_emission : source_color, hint_default_black, filter_linear_mipmap, repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy : hint_range(0.0, 100.0, 0.01);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform vec2 resolution = vec2(320.0, 180.0);

uniform float scan_line_amount :hint_range(0.0, 1.0) = 1.0;
uniform float warp_amount :hint_range(0.0, 5.0) = 0.1;
uniform float noise_amount :hint_range(0.0, 0.3) = 0.03;
uniform float interference_amount :hint_range(0.0, 1.0) = 0.2;
uniform float grille_amount :hint_range(0.0, 1.0) = 0.1;
uniform float grille_size :hint_range(1.0, 5.0) = 1.0;
uniform float vignette_amount :hint_range(0.0, 2.0) = 0.6;
uniform float vignette_intensity : hint_range(0.0, 1.0) = 0.4;
uniform float aberation_amount :hint_range(0.0, 1.0) = 0.5;
uniform float roll_line_amount :hint_range(0.0, 1.0) = 0.3;
uniform float roll_speed :hint_range(-8.0, 8.0) = 1.0;
uniform float scan_line_strength :hint_range(-12.0, -1.0) = -8.0;
uniform float pixel_strength :hint_range(-4.0, 0.0) = -2.0;

uniform float brightness = 1.0;
uniform float saturation = 1.0;

uniform float screen_curve_intensity = 800.0;

uniform bool crt_enabled = true;

float random(vec2 uv){
    return fract(cos(uv.x * 83.4827 + uv.y * 92.2842) * 43758.5453123);
}

vec3 fetch_pixel(vec2 uv, vec2 off){
	vec2 pos = floor(uv * resolution + off) / resolution + vec2(0.5) / resolution;

	float noise = 0.0;
	if(noise_amount > 0.0){
		noise = random(pos + fract(TIME)) * noise_amount;
	}

	if(max(abs(pos.x - 0.5), abs(pos.y - 0.5)) > 0.5){
		return vec3(0.0, 0.0, 0.0);
	}

	vec3 clr = texture(texture_emission , pos, -16.0).rgb + noise;
	return clr;
}

// Distance in emulated pixels to nearest texel.
vec2 Dist(vec2 pos){ 
	pos = pos * resolution;
	return - ((pos - floor(pos)) - vec2(0.5));
}
    
// 1D Gaussian.
float Gaus(float pos, float scale){ return exp2(scale * pos * pos); }

// 3-tap Gaussian filter along horz line.
vec3 Horz3(vec2 pos, float off){
	vec3 b = fetch_pixel(pos, vec2(-1.0, off));
	vec3 c = fetch_pixel(pos, vec2( 0.0, off));
	vec3 d = fetch_pixel(pos, vec2( 1.0, off));
	float dst = Dist(pos).x;
	
	// Convert distance to weight.
	float scale = pixel_strength;
	float wb = Gaus(dst - 1.0, scale);
	float wc = Gaus(dst + 0.0, scale);
	float wd = Gaus(dst + 1.0, scale);
	
	// Return filtered sample.
	return (b * wb + c * wc + d * wd) / (wb + wc + wd);
}

// Return scanline weight.
float Scan(vec2 pos, float off){
	float dst = Dist(pos).y;
	
	return Gaus(dst + off, scan_line_strength);
}

// Allow nearest three lines to effect pixel.
vec3 Tri(vec2 pos){
	vec3 clr = fetch_pixel(pos, vec2(0.0));
	if(scan_line_amount > 0.0){
		vec3 a = Horz3(pos,-1.0);
		vec3 b = Horz3(pos, 0.0);
		vec3 c = Horz3(pos, 1.0);

		float wa = Scan(pos,-1.0);
		float wb = Scan(pos, 0.0);
		float wc = Scan(pos, 1.0);

		vec3 scanlines = a * wa + b * wb + c * wc;
		clr = mix(clr, scanlines, scan_line_amount);
	}
	return clr;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	vec2 warped = uv + delta * delta_offset;
	return (warped - 0.5) / mix(1.0,1.2,warp_amount/5.0) + 0.5;
}

float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_amount);
}

float floating_mod(float a, float b){
	return a - b * floor(a/b);
}

vec3 grille(vec2 uv){
	float unit = PI / 3.0;
	float scale = 2.0*unit/grille_size;
	float r = smoothstep(0.5, 0.8, cos(uv.x*scale - unit));
	float g = smoothstep(0.5, 0.8, cos(uv.x*scale + unit));
	float b = smoothstep(0.5, 0.8, cos(uv.x*scale + 3.0*unit));
	return mix(vec3(1.0), vec3(r,g,b), grille_amount);
}

float roll_line(vec2 uv){
	float x = uv.y * 3.0 - TIME * roll_speed;
	float f = cos(x) * cos(x * 2.35 + 1.1) * cos(x * 4.45 + 2.3);
	float roll_line = smoothstep(0.5, 0.9, f);
	return roll_line * roll_line_amount;
}

mat3 saturationMatrix()
{
	float inv_sat = 1.0 - saturation;
	vec3 lum = vec3( 0.31, 0.61, 0.08);

	vec3 r = vec3(inv_sat * lum.x) + vec3(saturation, .0, .0);
	vec3 g = vec3(inv_sat * lum.y) + vec3(.0, saturation, .0);
	vec3 b = vec3(inv_sat * lum.z) + vec3(.0, .0, saturation);

	return mat3(r, g, b);
}

void vertex() {
	float z_curve = (.18 * .18 * .18 - abs(VERTEX.z) * abs(VERTEX.z) * abs(VERTEX.z));
	float x_curve = (.24 * .24 * .24 - abs(VERTEX.x) * abs(VERTEX.x) * abs(VERTEX.x));

	
	VERTEX.y = VERTEX.y + (z_curve * x_curve * screen_curve_intensity);
}

void fragment() {
	vec2 base_uv = UV;

	if (crt_enabled)
	{
		vec2 pix = FRAGCOORD.xy;
		vec2 pos = warp(UV);
		
		float line = 0.0;
		if(roll_line_amount > 0.0){
			line = roll_line(pos);
		}

		vec2 sq_pix = floor(pos * resolution) / resolution + vec2(0.5) / resolution;
		if(interference_amount + roll_line_amount > 0.0){
			float interference = random(sq_pix.yy + fract(TIME));
			pos.x += (interference * (interference_amount + line * 6.0)) / resolution.x;
		}

		vec3 clr = Tri(pos);
		if(aberation_amount > 0.0){
			float chromatic = aberation_amount + line * 2.0;
			vec2 chromatic_x = vec2(chromatic,0.0) / resolution.x;
			vec2 chromatic_y = vec2(0.0, chromatic/2.0) / resolution.y;
			float r = Tri(pos - chromatic_x).r;
			float g = Tri(pos + chromatic_y).g;
			float b = Tri(pos + chromatic_x).b;
			clr = vec3(r,g,b);
		}
		
		if(grille_amount > 0.0)clr *= grille(pix);
		clr *= 1.0 + scan_line_amount * 0.6 + line * 3.0 + grille_amount * 2.0;
		if(vignette_amount > 0.0)clr *= vignette(pos);
		
		EMISSION.rgb = clr * saturationMatrix() * brightness;
	}

	else
	{
		vec3 emission_tex = texture(texture_emission, base_uv).rgb;
		EMISSION = (emission.rgb + emission_tex) * emission_energy * brightness;
	}
}


void light() {}"

[sub_resource type="ViewportTexture" id="ViewportTexture_7wf1q"]
viewport_path = NodePath("desk_and_monitor/Monitor/Screen/SubViewport")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_6qf6a"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_kuaka")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/emission = Color(0, 0, 0, 1)
shader_parameter/emission_energy = 1.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/resolution = Vector2(480, 360)
shader_parameter/scan_line_amount = 0.214
shader_parameter/warp_amount = 0.45
shader_parameter/noise_amount = 0.177
shader_parameter/interference_amount = 0.2
shader_parameter/grille_amount = 0.171
shader_parameter/grille_size = 1.0
shader_parameter/vignette_amount = 0.626
shader_parameter/vignette_intensity = 0.339
shader_parameter/aberation_amount = 0.105
shader_parameter/roll_line_amount = 0.0
shader_parameter/roll_speed = 1.0
shader_parameter/scan_line_strength = -8.0
shader_parameter/pixel_strength = -1.667
shader_parameter/brightness = 1.0
shader_parameter/saturation = 1.1
shader_parameter/screen_curve_intensity = 800.0
shader_parameter/crt_enabled = true
shader_parameter/texture_emission = SubResource("ViewportTexture_7wf1q")

[sub_resource type="PlaneMesh" id="PlaneMesh_tx5rh"]
resource_local_to_scene = true
material = SubResource("ShaderMaterial_6qf6a")
size = Vector2(0.48, 0.36)
subdivide_width = 24
subdivide_depth = 24

[sub_resource type="Animation" id="Animation_h6gib"]
resource_name = "WakeUp"
length = 4.0
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1.53333, 1.76667, 2.46667, 3.03333, 3.86667),
"transitions": PackedFloat32Array(1, 1.7411, 0.535887, 1.7411, 2.14355, 1),
"update": 0,
"values": [Vector3(-1.15192, -0.523599, -0.174533), Vector3(-1.15192, -0.523599, -0.174533), Vector3(-1.11701, -0.488692, -0.139626), Vector3(-1.15192, -0.523599, -0.174533), Vector3(-0.698132, -0.20944, 0.0872665), Vector3(-0.175441, 0, 0)]
}
tracks/1/type = "method"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("..")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0.633333),
"transitions": PackedFloat32Array(1),
"values": [{
"args": [4.2],
"method": &"fade_in"
}]
}

[sub_resource type="Animation" id="Animation_u62p2"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(-0.175441, 0, 0)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_3vkgt"]
_data = {
"RESET": SubResource("Animation_u62p2"),
"WakeUp": SubResource("Animation_h6gib")
}

[sub_resource type="Environment" id="Environment_r6k71"]
background_mode = 1
ambient_light_color = Color(1, 1, 1, 1)
glow_bloom = 0.09
fog_light_color = Color(0.404511, 0.404511, 0.404511, 1)
fog_light_energy = 2.86
adjustment_enabled = true
adjustment_contrast = 1.02
adjustment_saturation = 1.96

[sub_resource type="ShaderMaterial" id="ShaderMaterial_prkpf"]
shader = ExtResource("4_61ix5")
shader_parameter/strength = 50.0

[sub_resource type="ShaderMaterial" id="ShaderMaterial_l2m7i"]
shader = ExtResource("4_wasif")
shader_parameter/outer_radius = 2.36
shader_parameter/main_alpha = 1.0

[sub_resource type="AudioStreamRandomizer" id="AudioStreamRandomizer_uydr7"]
random_pitch = 1.2
random_volume_offset_db = 2.0
streams_count = 5
stream_0/stream = ExtResource("11_0smbf")
stream_1/stream = ExtResource("12_8djac")
stream_2/stream = ExtResource("13_ea057")
stream_3/stream = ExtResource("14_p6rho")
stream_4/stream = ExtResource("15_vtsa8")

[sub_resource type="AudioStreamRandomizer" id="AudioStreamRandomizer_3qrds"]
random_pitch = 1.1
random_volume_offset_db = 2.0
streams_count = 5
stream_0/stream = ExtResource("16_c8kfr")
stream_1/stream = ExtResource("17_navo4")
stream_2/stream = ExtResource("18_mjsvc")
stream_3/stream = ExtResource("19_ihivk")
stream_4/stream = ExtResource("20_tafpt")

[node name="World" type="Node3D" node_paths=PackedStringArray("screen", "subviewport", "screen_interface", "blackout", "click_sfx", "keystroke_sfx", "room_light")]
script = ExtResource("1_upb24")
screen = NodePath("desk_and_monitor/Monitor/Screen")
subviewport = NodePath("desk_and_monitor/Monitor/Screen/SubViewport")
screen_interface = NodePath("desk_and_monitor/Monitor/Screen/SubViewport/ScreenInterface")
blackout = NodePath("Blackout")
black_screen = ExtResource("2_lmplv")
click_sfx = NodePath("ClickSFX")
keystroke_sfx = NodePath("KeystrokeSFX")
room_light = NodePath("AmbientLight")

[node name="Floor" type="MeshInstance3D" parent="."]
mesh = SubResource("PlaneMesh_ttfdm")

[node name="desk_and_monitor" parent="." instance=ExtResource("1_2j35s")]

[node name="Monitor" parent="desk_and_monitor" index="1"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -0.74, 0, 1, -3.23464e-08, 0, 1.27799, 0.655484)

[node name="Screen" type="MeshInstance3D" parent="desk_and_monitor/Monitor" index="0" node_paths=PackedStringArray("crt_startup")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1.35135, 0, 0.000762761, -0.00147974)
mesh = SubResource("PlaneMesh_tx5rh")
skeleton = NodePath("../../..")
surface_material_override/0 = ExtResource("2_lmplv")
script = ExtResource("5_uyaoj")
crt_startup = NodePath("CRTStartup")

[node name="SubViewport" type="SubViewport" parent="desk_and_monitor/Monitor/Screen"]
disable_3d = true
size = Vector2i(480, 360)

[node name="ScreenInterface" parent="desk_and_monitor/Monitor/Screen/SubViewport" instance=ExtResource("3_m55g1")]

[node name="CRTStartup" type="AudioStreamPlayer" parent="desk_and_monitor/Monitor/Screen"]
stream = ExtResource("7_tlk8b")
volume_db = -8.0
bus = &"SFX"

[node name="ScreenLight" type="SpotLight3D" parent="desk_and_monitor/Monitor" index="1"]
transform = Transform3D(1, 0, 0, 0, 1.31134e-07, -1, 0, 1.35135, 1.77208e-07, 0, -0.423216, 0.109246)
light_color = Color(0.85, 1, 0.9, 1)
spot_angle_attenuation = 3.03143
script = ExtResource("3_m71ua")
base_energy_range = Array[float]([1.0, 0.64])
base_energy_frequency = 2.1
flicker_energy_range = Array[float]([0.0, -0.08])
flicker_frequency = 0.05

[node name="AmbientLight" type="SpotLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.647588, 0.761991, 0, -0.761991, 0.647588, 0, 2.33191, 1.97066)
light_color = Color(1, 0.976544, 0.872294, 1)
light_energy = 2.4
shadow_enabled = true
spot_range = 20.855
spot_attenuation = 0.57
spot_angle = 75.0
spot_angle_attenuation = 3.24901
script = ExtResource("3_m71ua")
base_energy_range = Array[float]([2.4, 3.2])
base_energy_frequency = 2.7
flicker_energy_range = Array[float]([0.0, -0.05])
flicker_frequency = 0.05

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.98465, 0.174542, 0, -0.174542, 0.98465, 0.0319242, 1.36286, 1.11183)
current = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="Camera3D"]
libraries = {
"": SubResource("AnimationLibrary_3vkgt")
}
autoplay = "WakeUp"

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_r6k71")

[node name="Blackout" type="ColorRect" parent="."]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="FilmGrain" type="ColorRect" parent="."]
material = SubResource("ShaderMaterial_prkpf")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Vignette" type="ColorRect" parent="."]
material = SubResource("ShaderMaterial_l2m7i")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="BackgroundHum" type="AudioStreamPlayer" parent="."]
stream = ExtResource("7_o1ah1")
volume_db = -4.0
autoplay = true
bus = &"SFX"

[node name="ClickSFX" type="AudioStreamPlayer" parent="."]
stream = SubResource("AudioStreamRandomizer_uydr7")
volume_db = -12.0
max_polyphony = 3
bus = &"SFX"

[node name="KeystrokeSFX" type="AudioStreamPlayer" parent="."]
stream = SubResource("AudioStreamRandomizer_3qrds")
volume_db = -4.0
max_polyphony = 4
bus = &"SFX"

[editable path="desk_and_monitor"]
